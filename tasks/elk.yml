---
- name: ELK Stack Server Configuration
  become: yes
  block:
    # System Updates and Prerequisites
    - name: Update package cache (Rocky Linux)
      dnf:
        update_cache: yes
      when: ansible_distribution == "Rocky"

    - name: Check if Java 17 is installed
      command: java -version
      register: java_check
      failed_when: false
      changed_when: false

    - name: Install Java packages
      dnf:
        name: "{{ java_packages }}"
        state: present
      when: 
        - ansible_distribution == "Rocky"
        - java_check.rc != 0 or java_version not in java_check.stderr

    - name: Set JAVA_HOME environment variable
      lineinfile:
        path: /etc/environment
        line: 'JAVA_HOME={{ java_home_path }}'
        create: yes

    - name: Set default Java version
      alternatives:
        name: java
        path: "{{ java_home_path }}/bin/java"
        link: /usr/bin/java
      when: java_check.rc != 0 or java_version not in java_check.stderr

    - name: Install required packages (Rocky Linux)
      dnf:
        name: "{{ elk_required_packages }}"
        state: present
      when: ansible_distribution == "Rocky"

    # Elasticsearch Repository Setup
    - name: Check if Elasticsearch repository is configured
      stat:
        path: /etc/yum.repos.d/elasticsearch.repo
      register: elastic_repo_check

    - name: Import Elasticsearch GPG key
      rpm_key:
        key: https://artifacts.elastic.co/GPG-KEY-elasticsearch
        state: present
      when: 
        - ansible_distribution == "Rocky"
        - not elastic_repo_check.stat.exists

    - name: Add Elasticsearch repository (Rocky Linux)
      yum_repository:
        name: elasticsearch
        description: "Elasticsearch repository for {{ elasticsearch_version.split('.')[0] }}.x packages"
        baseurl: "https://artifacts.elastic.co/packages/{{ elasticsearch_version.split('.')[0] }}.x/yum"
        gpgcheck: yes
        gpgkey: https://artifacts.elastic.co/GPG-KEY-elasticsearch
        enabled: yes
        file: elasticsearch
      when: 
        - ansible_distribution == "Rocky"
        - not elastic_repo_check.stat.exists

    # Elasticsearch Installation and Configuration
    - name: Install Elasticsearch
      dnf:
        name: elasticsearch
        state: present
      when: ansible_distribution == "Rocky"

    - name: Configure Elasticsearch using template
      template:
        src: elasticsearch.yml.j2
        dest: /etc/elasticsearch/elasticsearch.yml
        backup: yes
        owner: root
        group: elasticsearch
        mode: '0660'
      notify: restart elasticsearch

    - name: Set Elasticsearch JVM heap size
      copy:
        content: |
          -Xms{{ elasticsearch_heap_size }}
          -Xmx{{ elasticsearch_heap_size }}
        dest: /etc/elasticsearch/jvm.options.d/heap.options
        owner: root
        group: elasticsearch
        mode: '0660'
      notify: restart elasticsearch

    - name: Fix Elasticsearch directory permissions
      file:
        path: "{{ item }}"
        owner: elasticsearch
        group: elasticsearch
        recurse: yes
        state: directory
      loop:
        - "{{ elasticsearch_data_path }}"
        - "{{ elasticsearch_logs_path }}"

    - name: Fix Elasticsearch config file permissions
      file:
        path: /etc/elasticsearch/elasticsearch.yml
        owner: root
        group: elasticsearch
        mode: '0660'

    - name: Clear any corrupted Elasticsearch data
      file:
        path: "{{ elasticsearch_data_path }}/nodes"
        state: absent

    - name: Ensure Elasticsearch data directory exists
      file:
        path: "{{ elasticsearch_data_path }}"
        state: directory
        owner: elasticsearch
        group: elasticsearch
        mode: '0750'

    - name: Enable and start Elasticsearch
      systemd:
        name: elasticsearch
        enabled: yes
        state: started
        daemon_reload: yes
      register: elasticsearch_service

    - name: Wait for Elasticsearch to be ready
      uri:
        url: "http://localhost:{{ elasticsearch_port }}"
        method: GET
        status_code: 200
      register: es_health_check
      until: es_health_check.status == 200
      retries: 12
      delay: 10
      ignore_errors: yes

    - name: Debug Elasticsearch health check
      debug:
        msg: 
          - "Elasticsearch Status: {{ es_health_check.status | default('Failed') }}"
          - "Elasticsearch URL: http://{{ ansible_default_ipv4.address }}:{{ elasticsearch_port }}"

    # Kibana Installation and Configuration
    - name: Install Kibana
      dnf:
        name: kibana
        state: present
      when: ansible_distribution == "Rocky"

    - name: Create Kibana log directory
      file:
        path: "{{ kibana_logs_path }}"
        state: directory
        owner: kibana
        group: kibana
        mode: '0755'

    - name: Configure Kibana using template
      template:
        src: kibana.yml.j2
        dest: /etc/kibana/kibana.yml
        backup: yes
        owner: root
        group: kibana
        mode: '0660'
      notify: restart kibana

    - name: Fix Kibana directory permissions
      file:
        path: "{{ item }}"
        owner: kibana
        group: kibana
        recurse: yes
        state: directory
      loop:
        - "{{ kibana_logs_path }}"
        - /etc/kibana
        - /usr/share/kibana

    - name: Enable and start Kibana
      systemd:
        name: kibana
        enabled: yes
        state: started
        daemon_reload: yes
      register: kibana_service

    - name: Wait for Kibana to be ready (this can take 1-2 minutes)
      uri:
        url: "http://localhost:{{ kibana_port }}"
        method: GET
        status_code: 200
      register: kibana_health_check
      until: kibana_health_check.status == 200
      retries: 20
      delay: 15
      ignore_errors: yes

    - name: Debug Kibana health check
      debug:
        msg: 
          - "Kibana Status: {{ kibana_health_check.status | default('Failed') }}"
          - "Kibana URL: http://{{ ansible_default_ipv4.address }}:{{ kibana_port }}"

    # Logstash Installation and Configuration  
    - name: Install Logstash
      dnf:
        name: logstash
        state: present
      when: ansible_distribution == "Rocky"

    - name: Configure Logstash pipeline using template
      template:
        src: logstash-syslog.conf.j2
        dest: "{{ logstash_config_path }}/syslog.conf"
        backup: yes
      notify: restart logstash     

    - name: Check if Logstash JVM options file exists
      stat:
        path: /etc/logstash/jvm.options
      register: jvm_options_file

    - name: Set Logstash JVM heap size in main options file
      lineinfile:
        path: /etc/logstash/jvm.options
        regexp: "{{ item.regexp }}"
        line: "{{ item.line }}"
        backup: yes
      loop:
        - { regexp: '^-Xms.*', line: '-Xms{{ logstash_heap_size }}' }
        - { regexp: '^-Xmx.*', line: '-Xmx{{ logstash_heap_size }}' }
      when: jvm_options_file.stat.exists
      notify: restart logstash

    # Fallback: create basic JVM options if file doesn't exist
    - name: Create basic Logstash JVM options file if missing
      copy:
        content: |
          # Basic JVM options for Logstash
          -Xms{{ logstash_heap_size }}
          -Xmx{{ logstash_heap_size }}
          -XX:+UseParNewGC
          -XX:+UseConcMarkSweepGC
          -XX:CMSInitiatingOccupancyFraction=75
          -XX:+UseCMSInitiatingOccupancyOnly
          -Djava.awt.headless=true
          -Dfile.encoding=UTF-8
          -Djruby.compile.invokedynamic=true
          -Djruby.jit.threshold=0
          -XX:+HeapDumpOnOutOfMemoryError
          -Djava.security.egd=file:/dev/urandom
        dest: /etc/logstash/jvm.options
        owner: root
        group: logstash
        mode: '0644'
        backup: yes
      when: not jvm_options_file.stat.exists
      notify: restart logstash

    - name: Enable and start Logstash
      systemd:
        name: logstash
        enabled: yes
        state: started
        daemon_reload: yes
      register: logstash_service

    # Firewall Configuration
    - name: Start firewalld if not running
      systemd:
        name: firewalld
        state: started
        enabled: yes
      ignore_errors: yes

    - name: Configure firewalld for ELK services
      firewalld:
        port: "{{ item }}/tcp"
        permanent: yes
        state: enabled
        immediate: yes
      loop: "{{ elk_firewall_ports }}"
      ignore_errors: yes

    - name: Configure firewalld for syslog UDP
      firewalld:
        port: "514/udp"
        permanent: yes
        state: enabled
        immediate: yes
      ignore_errors: yes

    # Final Status Check
    - name: Check all ELK service statuses
      systemd:
        name: "{{ item }}"
      register: final_service_status
      loop: "{{ elk_services }}"

    - name: Display final service statuses
      debug:
        msg: "{{ item.item }} is {{ item.status.ActiveState }} ({{ item.status.SubState }})"
      loop: "{{ final_service_status.results }}"

    - name: Display ELK Stack URLs
      debug:
        msg:
          - "Elasticsearch: http://{{ ansible_default_ipv4.address }}:{{ elasticsearch_port }}"
          - "Kibana: http://{{ ansible_default_ipv4.address }}:{{ kibana_port }}"
          - "Logstash Beats: {{ ansible_default_ipv4.address }}:{{ logstash_beats_port }}"
          - "Logstash Syslog: {{ ansible_default_ipv4.address }}:{{ logstash_port }}"

  tags:
    - elk
    - elasticsearch
    - kibana
    - logstash